
/*****************************************************************************************************************
	UNIVERSIDAD NACIONAL AUTONOMA DE MEXICO
	FACULTAD DE ESTUDIOS SUPERIORES -ARAGON-

	Computadoras y programacion. 
	(c) Ponga su nombre y numero de cuenta aqui.
	
	Quiso decir: Programa principal de la aplicacion de la distancia de Levenstein.
	
******************************************************************************************************************/


#include "stdafx.h"
#include <string.h>
#include "corrector.h"
#define DEPURAR 1 //Colocar un numero ! de 1 al mandarlo al evaluador



void intercambiar(char* a, char* b) {
	char temp[TAMTOKEN];
	strcpy_s(temp, TAMTOKEN, a);
	strcpy_s(a, TAMTOKEN, b);
	strcpy_s(b, TAMTOKEN, temp);
}


//Burbujazo


//Funciones publicas del proyecto
/*****************************************************************************************************************
	DICCIONARIO: Esta funcion crea el diccionario completo
	char *	szNombre				:	Nombre del archivo de donde se sacaran las palabras del diccionario	
	char	szPalabras[][TAMTOKEN]	:	Arreglo con las palabras completas del diccionario
	int		iEstadisticas[]			:	Arreglo con el numero de veces que aparecen las palabras en el diccionario
	int &	iNumElementos			:	Numero de elementos en el diccionario
******************************************************************************************************************/
void Diccionario(char* szNombre, char szPalabras[][TAMTOKEN], int iEstadisticas[], int& iNumElementos) {
	FILE* fpDicc;
	char palabraDetectada[TAMTOKEN];
	iNumElementos = 0;

	fopen_s(&fpDicc, szNombre, "r");
	if (fpDicc != NULL) {
		while (fscanf(fpDicc, "%s", palabraDetectada) == 1) 
		{
			// Eliminar signos de puntuación y convertir a minúsculas
			size_t len = strlen(palabraDetectada);
			size_t j = 0; // Índice para la palabra filtrada sin signos
			for (size_t i = 0; i < len; i++) 
			{
				// Mantener solo los caracteres alfabéticos y convertir a minúsculas
				if ((palabraDetectada[i] >= 'a' && palabraDetectada[i] <= 'z') || (palabraDetectada[i] >= 'A' && palabraDetectada[i] <= 'Z')) 
				{
					// Convertir a minúsculas y almacenar en la misma cadena
					palabraDetectada[j++] = towlower(palabraDetectada[i]);
				}
			}
			palabraDetectada[j] = '\0'; // Añadir terminador nulo

			// Verificar si la palabra ya está en el arreglo szPalabras
			int indice = -1;
			for (int i = 0; i < iNumElementos; i++) {
				if (strcmp(szPalabras[i], palabraDetectada) == 0) 
				{
					indice = i;
					break;
				}
			}

			// Si la palabra ya existe, incrementar el contador de estadísticas
			if (indice != -1) 
			{
				iEstadisticas[indice]++;
			}
			else 
			{
				// Agregar la nueva palabra al arreglo
				strcpy_s(szPalabras[iNumElementos], TAMTOKEN, palabraDetectada);
				iEstadisticas[iNumElementos] = 1;
				iNumElementos++;
			}
		}

		fclose(fpDicc);

		// Ordenar szPalabras por orden alfabético usando el método de la burbuja
		for (int i = 0; i < iNumElementos - 1; i++) 
		{
			for (int j = 0; j < iNumElementos - i - 1; j++) 
			{
				if (strcmp(szPalabras[j], szPalabras[j + 1]) > 0) 
				{
					intercambiar(szPalabras[j], szPalabras[j + 1]);
					// Intercambiar también las estadísticas correspondientes
					int temp = iEstadisticas[j];
					iEstadisticas[j] = iEstadisticas[j + 1];
					iEstadisticas[j + 1] = temp;
				}
			}
		}
	}
}
/*****************************************************************************************************************
	ListaCandidatas: Esta funcion recupera desde el diccionario las palabras validas y su peso
	Regresa las palabras ordenadas por su peso
	char	szPalabrasSugeridas[][TAMTOKEN],	//Lista de palabras clonadas
	int		iNumSugeridas,						//Lista de palabras clonadas
	char	szPalabras[][TAMTOKEN],				//Lista de palabras del diccionario
	int		iEstadisticas[],					//Lista de las frecuencias de las palabras
	int		iNumElementos,						//Numero de elementos en el diccionario
	char	szListaFinal[][TAMTOKEN],			//Lista final de palabras a sugerir
	int		iPeso[],							//Peso de las palabras en la lista final
	int &	iNumLista)							//Numero de elementos en la szListaFinal
******************************************************************************************************************/


/*****************************************************************************************************************
	ClonaPalabras: toma una palabra y obtiene todas las combinaciones y permutaciones requeridas por el metodo
	char *	szPalabraLeida,						// Palabra a clonar
	char	szPalabrasSugeridas[][TAMTOKEN], 	//Lista de palabras clonadas
	int &	iNumSugeridas)						//Numero de elementos en la lista
******************************************************************************************************************/
